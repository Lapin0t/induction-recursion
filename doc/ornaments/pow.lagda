%include agda.fmt
%include ornaments.fmt

\begin{code}
module ornaments.pow where
open import ornaments.prelude
open import ornaments.fam hiding (el; Œ±‚ÇÄ; Œ±‚ÇÅ; Œ≤‚ÇÄ; Œ≤‚ÇÅ)

variable
  {Œ±‚ÇÄ Œ±‚ÇÅ} : Level
  {Œ≤‚ÇÄ Œ≤‚ÇÅ} : Level

\end{code}


%<*pref>
\begin{code}
record PRef {-<-}{Œ±‚ÇÄ Œ≤‚ÇÄ}{->-}(Œ±‚ÇÅ Œ≤‚ÇÅ : Level) (X : ISet Œ±‚ÇÄ Œ≤‚ÇÄ) : Set (Œ±‚ÇÄ ‚äî Œ≤‚ÇÄ ‚äî lsuc Œ±‚ÇÅ ‚äî lsuc Œ≤‚ÇÅ) where
  field
    Code : Set Œ±‚ÇÅ
    down : Code ‚Üí Fam.Code X
    decode : (j : Code) ‚Üí decode X (down j) ‚Üí Set Œ≤‚ÇÅ
open PRef public
\end{code}
%</pref>

%<*pfam>
\begin{code}
PFam : {-<-}{X : ISet Œ±‚ÇÄ Œ≤‚ÇÄ} ‚Üí{->-}PRef Œ±‚ÇÅ Œ≤‚ÇÅ X ‚Üí ISet Œ±‚ÇÅ (Œ≤‚ÇÄ ‚äî Œ≤‚ÇÅ)
Code (PFam P) = Code P
decode (PFam P) j = Œ£ _ (decode P j)
\end{code}
%</pfam>

%<*ref>
\begin{code}
Ref : ‚àÄ {Œ± Œ≤ Œ≥} {X : ISet Œ± Œ≤} (F : ùîΩ Œ≥ X) ‚Üí PRef (Œ± ‚äî Œ≥) Œ≤ X
Code (Ref F) = Œ£ _ (Code ‚àò F)
down (Ref F) (i , _) = i
decode (Ref F) (i , j) x = decode (F i) j ‚â° x
\end{code}
%</ref>


\begin{code}


PObj : {X : ISet Œ±‚ÇÄ Œ≤‚ÇÄ}(Œ≥‚ÇÅ : Level) (R : PRef Œ±‚ÇÅ Œ≤‚ÇÅ X) (F : ùîΩ Œ≥‚ÇÄ X) ‚Üí Set (Œ±‚ÇÅ ‚äî Œ≤‚ÇÅ ‚äî lsuc (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ))
PObj {Œ≥‚ÇÄ = Œ≥‚ÇÄ} Œ≥‚ÇÅ R F = (j : Code $ PFam R) ‚Üí (x : Code (F $ down R j)) ‚Üí Fam (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ) (decode R j (decode (F $ down R j) x))


{-infix 30 _&_
_&_ : {X : ISet Œ±‚ÇÄ Œ≤‚ÇÄ}{R : PRef Œ±‚ÇÅ Œ≤‚ÇÅ X}(F : ùîΩ Œ≥‚ÇÄ X) (G : PObj Œ≥‚ÇÅ R F) ‚Üí ùîΩ (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ) (PFam R)
Code ((F & G) j) = Œ£ _ (Code ‚àò G j)
decode ((F & G) j) (x , y) = _ , decode (G j x) y-}





{-record PObj {Œ±‚ÇÄ Œ±‚ÇÅ Œ≤‚ÇÄ Œ≤‚ÇÅ Œ≥‚ÇÄ} {X : ISet Œ±‚ÇÄ Œ≤‚ÇÄ} (Œ≥‚ÇÅ : Level) (R : PRef Œ±‚ÇÅ Œ≤‚ÇÅ X) (F : ùîΩ Œ≥‚ÇÄ X) : Set (Œ±‚ÇÅ ‚äî Œ≤‚ÇÅ ‚äî lsuc (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ)) where
  field
    addon : (j : Code $ PFam R) ‚Üí (x : Code (F $ down R j)) ‚Üí Fam (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ) (decode R j (decode (F $ down R j) x))

  pfam : ùîΩ (Œ≥‚ÇÄ ‚äî Œ≥‚ÇÅ) (PFam R)
  Code (pfam j) = Œ£ _ (Code ‚àò addon j)
  decode (pfam j) (x , y) = _ , decode (addon j x) y

open PObj public-}
\end{code}
